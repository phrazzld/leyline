name: Validate Content

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

# Cancel in-progress runs on the same PR to save resources
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.0
        bundler-cache: false

    - name: CI Pipeline Health Check
      run: |
        echo "üè• CI Pipeline Health Assessment"
        echo "================================"
        echo ""

        # Environment Information
        echo "üìä Environment Information:"
        echo "Runner OS: $(uname -a)"
        echo "Architecture: $(uname -m)"
        echo "Kernel: $(uname -r)"
        echo "Hostname: $(hostname)"
        echo "Date: $(date)"
        echo "User: $(whoami)"
        echo "Working Directory: $(pwd)"
        echo ""

        # Tool Version Inventory
        echo "üîß Tool Version Inventory:"

        # Language Runtimes
        echo "Language Runtimes:"
        if command -v ruby >/dev/null 2>&1; then
          echo "  ‚úÖ Ruby: $(ruby --version)"
        else
          echo "  ‚ùå Ruby: Not found"
        fi

        if command -v python3 >/dev/null 2>&1; then
          echo "  ‚ö†Ô∏è  Python: $(python3 --version) (disabled for docs repo)"
        else
          echo "  ‚ö†Ô∏è  Python: Not found (disabled for docs repo)"
        fi

        if command -v node >/dev/null 2>&1; then
          echo "  ‚ÑπÔ∏è  Node.js: $(node --version) (if needed)"
        else
          echo "  ‚ÑπÔ∏è  Node.js: Not found (optional)"
        fi
        echo ""

        # Required Ruby Tools
        echo "Ruby Tools:"
        if ruby -e "exit(0)" 2>/dev/null; then
          echo "  ‚úÖ Ruby interpreter: Working"
        else
          echo "  ‚ùå Ruby interpreter: Failed basic test"
          exit 1
        fi

        # Validation Tools
        echo "Validation Tools:"
        if [ -f "tools/validate_front_matter.rb" ]; then
          echo "  ‚úÖ validate_front_matter.rb: Present"
          if ruby tools/validate_front_matter.rb --help >/dev/null 2>&1; then
            echo "  ‚úÖ validate_front_matter.rb: Functional"
          else
            echo "  ‚ö†Ô∏è  validate_front_matter.rb: Help command failed (may still work)"
          fi
        else
          echo "  ‚ùå validate_front_matter.rb: Missing"
          exit 1
        fi

        if [ -f "tools/reindex.rb" ]; then
          echo "  ‚úÖ reindex.rb: Present"
        else
          echo "  ‚ùå reindex.rb: Missing"
          exit 1
        fi
        echo ""

        # Git Information
        echo "üìú Git Information:"
        echo "Git version: $(git --version)"
        echo "Repository: $(git config --get remote.origin.url || echo 'No remote origin')"
        echo "Current branch: $(git branch --show-current)"
        echo "Latest commit: $(git log --oneline -1)"
        echo "Repository status: $(git status --porcelain | wc -l) modified files"
        echo ""

        # Disk Space Check
        echo "üíæ Resource Status:"
        echo "Disk usage: $(df -h . | tail -1 | awk '{print $5 " used (" $4 " available)"}')"
        echo "Memory: $(free -h | grep '^Mem:' | awk '{print $3 "/" $2 " used"}')"
        echo ""

        # GitHub Actions Context
        echo "üé¨ GitHub Actions Context:"
        echo "Event: ${{ github.event_name }}"
        echo "Actor: ${{ github.actor }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Job: ${{ github.job }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Run Number: ${{ github.run_number }}"
        echo "SHA: ${{ github.sha }}"
        echo ""

        echo "‚úÖ Health check completed successfully"
        echo "üöÄ Proceeding with validation pipeline..."

    # Python validation disabled for documentation repository
    # - name: Set up Python
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: '3.11'

    # - name: Install Python linting tools
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install flake8 mypy

    - name: Essential CI Validation
      run: |
        echo "üöÄ Running essential CI validation (fast mode)"
        echo "This validates only essential quality gates: YAML front-matter + Index consistency"
        export LEYLINE_STRUCTURED_LOGGING=true
        ruby tools/run_ci_checks.rb --essential
        if [ $? -ne 0 ]; then
          echo "::error::Essential validation failed!"
          echo "::error::Run 'ruby tools/run_ci_checks.rb --essential' locally to debug"
          exit 1
        fi
        echo "‚úÖ Essential validation completed successfully"

    - name: Document length enforcement
      run: |
        echo "::group::üìè Validating document length limits"
        echo "Checking that tenets ‚â§100 lines (warn) / ‚â§150 lines (fail)"
        echo "Checking that bindings ‚â§200 lines (warn) / ‚â§300 lines (fail)"
        echo "Content lines only (excluding YAML front-matter and empty lines)"
        echo ""

        # Run enforcement script and capture output
        if ruby tools/enforce_doc_limits.rb --verbose > /tmp/doc_limits.log 2>&1; then
          echo "‚úÖ All documents within limits!"

          # Show summary in collapsible group
          echo "::group::‚úÖ Document Length Summary"
          cat /tmp/doc_limits.log
          echo "::endgroup::"

          # Add success to job summary
          echo "### üìè Document Length Validation: ‚úÖ PASSED" >> $GITHUB_STEP_SUMMARY
          echo "All documents are within the specified limits." >> $GITHUB_STEP_SUMMARY

        else
          echo "::endgroup::"
          echo "‚ùå Document length violations found!"

          # Parse output to create annotations for specific files
          while IFS= read -r line; do
            if [[ $line =~ ^[[:space:]]*([^:]+):[[:space:]]*([0-9]+)[[:space:]]*lines[[:space:]]*\(.*limit.*([0-9]+)\) ]]; then
              file="${BASH_REMATCH[1]}"
              actual="${BASH_REMATCH[2]}"
              limit="${BASH_REMATCH[3]}"
              if [[ $line =~ "warn at" ]]; then
                echo "::warning file=${file}::Document length warning: ${actual} lines (approaching ${limit} line limit)"
              else
                echo "::error file=${file}::Document length violation: ${actual} lines (exceeds ${limit} line limit)"
              fi
            fi
          done < /tmp/doc_limits.log

          # Add failure summary
          echo "### üìè Document Length Validation: ‚ùå FAILED" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat /tmp/doc_limits.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Fix**: Reduce document length to meet limits:" >> $GITHUB_STEP_SUMMARY
          echo "- Tenets: ‚â§100 lines (content)" >> $GITHUB_STEP_SUMMARY
          echo "- Bindings: ‚â§200 lines (content)" >> $GITHUB_STEP_SUMMARY

          exit 1
        fi
        echo "::endgroup::"

    # Python code validation disabled - documentation examples don't need strict production validation
    # - name: Validate Python code examples
    #   run: ruby tools/validate_python_examples.rb -v


    - name: Report validation results
      if: failure()
      run: |
        echo "‚ùå Content validation failed"
        echo "Please fix the errors above and commit again"
        exit 1
