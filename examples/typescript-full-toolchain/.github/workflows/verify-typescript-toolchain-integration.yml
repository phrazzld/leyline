name: Verify Full TypeScript Toolchain Integration

on:
  push:
    branches: [main, master]
    paths:
      - 'examples/typescript-full-toolchain/**'
      - '.github/workflows/verify-typescript-toolchain-integration.yml'
  pull_request:
    paths:
      - 'examples/typescript-full-toolchain/**'
      - '.github/workflows/verify-typescript-toolchain-integration.yml'

jobs:
  verify-integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18.x', '20.x', '22.x']

    name: Verify on Node.js ${{ matrix.node-version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: 'examples/typescript-full-toolchain/pnpm-lock.yaml'

      - name: Install Dependencies
        working-directory: ./examples/typescript-full-toolchain
        run: pnpm install --frozen-lockfile

      - name: Run Lint and Format Checks (Quality Gate)
        working-directory: ./examples/typescript-full-toolchain
        run: pnpm quality:check

      - name: Run Tests with Coverage (Test Gate)
        working-directory: ./examples/typescript-full-toolchain
        run: pnpm test:coverage

      - name: Build Project (Build Gate)
        working-directory: ./examples/typescript-full-toolchain
        run: pnpm build

      - name: Verify Build Artifacts (Deploy Prep Gate)
        working-directory: ./examples/typescript-full-toolchain
        run: |
          echo "Verifying build output..."
          if [ ! -f "dist/index.js" ]; then echo "::error::CJS build artifact not found!"; exit 1; fi
          if [ ! -f "dist/index.mjs" ]; then echo "::error::ESM build artifact not found!"; exit 1; fi
          if [ ! -f "dist/index.d.ts" ]; then echo "::error::Type definition artifact not found!"; exit 1; fi
          echo "✅ All build artifacts are present."

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
          cache-dependency-path: 'examples/typescript-full-toolchain/pnpm-lock.yaml'

      - name: Install Dependencies
        working-directory: ./examples/typescript-full-toolchain
        run: pnpm install --frozen-lockfile

      - name: Secret Detection Scan
        working-directory: ./examples/typescript-full-toolchain
        run: |
          echo "🔍 Scanning for hardcoded secrets..."

          # Define secret patterns to search for
          SECRET_PATTERNS=(
            "api[_-]?key['\"]?\s*[:=]\s*['\"][^'\"]{8,}['\"]"
            "password['\"]?\s*[:=]\s*['\"][^'\"]{8,}['\"]"
            "secret['\"]?\s*[:=]\s*['\"][^'\"]{8,}['\"]"
            "token['\"]?\s*[:=]\s*['\"][^'\"]{8,}['\"]"
            "bearer\s+[a-zA-Z0-9_.-]{20,}"
            "sk_live_[a-zA-Z0-9]{20,}"
            "pk_live_[a-zA-Z0-9]{20,}"
            "access[_-]?token['\"]?\s*[:=]\s*['\"][^'\"]{10,}['\"]"
            "client[_-]?secret['\"]?\s*[:=]\s*['\"][^'\"]{10,}['\"]"
            "private[_-]?key['\"]?\s*[:=]\s*['\"][^'\"]{20,}['\"]"
            "database[_-]?url['\"]?\s*[:=]\s*['\"][^'\"]{10,}['\"]"
            "mongodb://[^'\"\\s]{10,}"
            "mysql://[^'\"\\s]{10,}"
            "postgres://[^'\"\\s]{10,}"
          )

          VIOLATIONS_FOUND=0

          # Scan source files for secrets
          for pattern in "${SECRET_PATTERNS[@]}"; do
            echo "Checking pattern: $pattern"
            if grep -r -i -E "$pattern" src/ tests/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" 2>/dev/null; then
              echo "::error::Potential secret detected with pattern: $pattern"
              VIOLATIONS_FOUND=1
            fi
          done

          # Check for hardcoded URLs (excluding localhost)
          echo "🌐 Checking for hardcoded URLs..."
          if grep -r -E "https?://(?!localhost|127\.0\.0\.1|0\.0\.0\.0|example\.com)[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}" src/ tests/ --include="*.ts" --include="*.tsx" 2>/dev/null; then
            echo "::error::Hardcoded production URLs detected"
            VIOLATIONS_FOUND=1
          fi

          # Check for TODO/FIXME comments mentioning security
          echo "📝 Checking for security-related TODOs..."
          if grep -r -i -E "(TODO|FIXME|HACK).*(?:security|auth|password|token)" src/ tests/ --include="*.ts" --include="*.tsx" 2>/dev/null; then
            echo "::warning::Security-related TODO/FIXME comments found - review for completion"
          fi

          if [ $VIOLATIONS_FOUND -eq 1 ]; then
            echo "::error::Security scan failed - secrets or hardcoded values detected"
            exit 1
          fi

          echo "✅ Secret detection scan passed"

      - name: Dependency Vulnerability Scan
        working-directory: ./examples/typescript-full-toolchain
        run: |
          echo "🔍 Scanning dependencies for known vulnerabilities..."

          # Run pnpm audit and capture output
          if pnpm audit --audit-level moderate; then
            echo "✅ No moderate or higher vulnerabilities found"
          else
            echo "::error::Dependencies with moderate or higher vulnerabilities detected"
            echo "Run 'pnpm audit --fix' to resolve automatically fixable issues"
            exit 1
          fi

      - name: License Compliance Check
        working-directory: ./examples/typescript-full-toolchain
        run: |
          echo "📜 Checking license compliance..."

          # Extract license information from dependencies
          pnpm licenses list --json > licenses.json

          # Define prohibited licenses (copyleft licenses that may conflict with commercial use)
          PROHIBITED_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0" "WTFPL")

          COMPLIANCE_ISSUES=0

          for license in "${PROHIBITED_LICENSES[@]}"; do
            if grep -q "\"$license\"" licenses.json; then
              echo "::error::Prohibited license detected: $license"
              COMPLIANCE_ISSUES=1
            fi
          done

          # Check for packages without licenses
          if grep -q "\"UNKNOWN\"" licenses.json; then
            echo "::warning::Dependencies with unknown licenses detected"
            echo "Review dependencies without clear licensing"
          fi

          rm licenses.json

          if [ $COMPLIANCE_ISSUES -eq 1 ]; then
            echo "::error::License compliance check failed"
            exit 1
          fi

          echo "✅ License compliance check passed"

      - name: Environment Configuration Security
        working-directory: ./examples/typescript-full-toolchain
        run: |
          echo "⚙️  Validating environment configuration security..."

          # Check if .env.example exists and is properly structured
          if [ ! -f ".env.example" ]; then
            echo "::error::.env.example file is missing"
            exit 1
          fi

          # Verify .env.example doesn't contain actual secrets
          if grep -E "(sk_live_|pk_live_|bearer [a-zA-Z0-9_.-]{20,})" .env.example; then
            echo "::error::.env.example contains what appears to be real secrets"
            exit 1
          fi

          # Check that critical environment variables are documented
          REQUIRED_ENV_DOCS=("API_BASE_URL" "AUTH_TOKEN_KEY" "REQUIRE_AUTH")

          for env_var in "${REQUIRED_ENV_DOCS[@]}"; do
            if ! grep -q "$env_var" .env.example; then
              echo "::warning::Environment variable $env_var not documented in .env.example"
            fi
          done

          # Ensure .env files are in .gitignore (if .gitignore exists)
          if [ -f ".gitignore" ]; then
            if ! grep -q "^\.env$" .gitignore; then
              echo "::error::.env files should be in .gitignore to prevent accidental commits"
              exit 1
            fi
          fi

          echo "✅ Environment configuration security check passed"

      - name: Security Test Execution
        working-directory: ./examples/typescript-full-toolchain
        run: |
          echo "🧪 Running security-focused tests..."

          # Run tests that specifically target security concerns
          pnpm test --reporter=verbose security 2>/dev/null || echo "No security-specific tests found (this is acceptable)"

          echo "✅ Security tests completed"

      - name: Security Summary Report
        working-directory: ./examples/typescript-full-toolchain
        if: always()
        run: |
          echo "📊 Security Scan Summary"
          echo "========================"
          echo "✅ Secret detection: Completed"
          echo "✅ Dependency vulnerability scan: Completed"
          echo "✅ License compliance: Completed"
          echo "✅ Environment configuration: Completed"
          echo "✅ Security tests: Completed"
          echo ""
          echo "🔒 Security baseline established for TypeScript Full Toolchain"
          echo "📋 Review security documentation in SECURITY.md for detailed guidance"
