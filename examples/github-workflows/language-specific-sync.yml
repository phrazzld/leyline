# Language-Specific Leyline Sync Example
#
# This example demonstrates automatic language detection to sync only relevant categories.
# It detects your project's languages and syncs the appropriate Leyline bindings.
#
# For a comprehensive example with all options, see:
# 📖 examples/consumer-workflows/sync-leyline-example.yml

name: Leyline Sync (Auto-Detect Languages)

on:
  # Weekly check for updates
  schedule:
    - cron: '0 9 * * 1'
  # Manual trigger for testing
  workflow_dispatch:
  # Or trigger on workflow file changes
  pull_request:
    paths:
      - '.github/workflows/leyline-sync.yml'

jobs:
  detect-languages:
    name: Detect Project Languages
    runs-on: ubuntu-latest
    outputs:
      categories: ${{ steps.detect.outputs.categories }}

    steps:
      # First, detect what languages/frameworks are in use
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Detect Languages
        id: detect
        run: |
          echo "🔍 Detecting project languages and frameworks..."

          CATEGORIES=""

          # Detect Go
          if [[ -f "go.mod" ]] || find . -name "*.go" -type f | head -1 > /dev/null; then
            echo "✓ Go detected"
            CATEGORIES="${CATEGORIES}go,"
          fi

          # Detect Rust
          if [[ -f "Cargo.toml" ]] || find . -name "*.rs" -type f | head -1 > /dev/null; then
            echo "✓ Rust detected"
            CATEGORIES="${CATEGORIES}rust,"
          fi

          # Detect TypeScript/JavaScript
          if [[ -f "package.json" ]] || [[ -f "tsconfig.json" ]] || find . -name "*.ts" -o -name "*.tsx" -type f | head -1 > /dev/null; then
            echo "✓ TypeScript detected"
            CATEGORIES="${CATEGORIES}typescript,"
          fi

          # Detect Frontend code
          if [[ -d "frontend/" ]] || [[ -d "src/components/" ]] || find . -name "*.jsx" -o -name "*.tsx" -o -name "*.vue" -type f | head -1 > /dev/null; then
            echo "✓ Frontend code detected"
            CATEGORIES="${CATEGORIES}frontend,"
          fi

          # Detect Backend indicators
          if [[ -d "backend/" ]] || [[ -d "api/" ]] || [[ -d "server/" ]] || [[ -f "Dockerfile" ]]; then
            echo "✓ Backend code detected"
            CATEGORIES="${CATEGORIES}backend,"
          fi

          # Remove trailing comma
          CATEGORIES=${CATEGORIES%,}

          if [[ -z "$CATEGORIES" ]]; then
            echo "ℹ️ No specific language categories detected, will sync core bindings only"
          else
            echo "📦 Categories to sync: $CATEGORIES"
          fi

          echo "categories=$CATEGORIES" >> $GITHUB_OUTPUT

  # Now sync Leyline content based on detected languages
  sync-leyline:
    name: Sync Leyline Content
    needs: detect-languages
    uses: phrazzld/leyline/.github/workflows/sync-leyline-content.yml@v1
    with:
      # Required inputs
      token: ${{ secrets.GITHUB_TOKEN }}
      leyline_ref: v1.0.0  # Pin to specific version

      # Use detected categories (empty string means core only)
      categories: ${{ needs.detect-languages.outputs.categories }}

      # Optional: Customize other parameters
      target_path: docs/leyline
      create_pr: true
      pr_title: "Update Leyline Standards (Auto-Detected: ${{ needs.detect-languages.outputs.categories || 'core only' }})"

# Alternative: Inline language detection (if you prefer a single job)
# ============================================================================
#
# jobs:
#   sync-with-detection:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#
#       - name: Detect and Sync
#         uses: phrazzld/leyline/.github/workflows/sync-leyline-content.yml@v1
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           leyline_ref: v1.0.0
#           # Use bash substitution to detect categories inline
#           categories: |
#             ${{
#               (hashFiles('go.mod') != '' && 'go,') ||
#               (hashFiles('Cargo.toml') != '' && 'rust,') ||
#               (hashFiles('package.json') != '' && 'typescript,') ||
#               ''
#             }}

# Notes:
# - Language detection runs before each sync to ensure accuracy
# - You can customize the detection logic for your specific needs
# - Consider caching detection results if running frequently
# - The workflow will create PRs with clear indication of what was synced
